{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger2","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAqFA,aArFA,QAAA,oBAIA,MAAMA,EAAQC,GACH,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KAILI,EAAUC,GAAQC,QAAQC,sBAAsBF,OAEtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IACxB,IAAIb,QAASC,IAKhBA,EAJqBW,EAASE,IAAIC,GAC9BA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAOnEC,EAAUC,GAAgBZ,QAAQa,MAAMD,GAE9CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAInC,MAAMG,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACf5B,MAAAA,EAAQqB,EAA0B,IAAK,KAEtC,OAAA,IAAInB,QAAQ,CAACC,EAAS0B,KAEzBzB,WAAW,KACYoB,KAAKE,SAAW,IAG/BvB,EAAQyB,EAAYE,GAAI9B,GAG5B6B,EAAOD,EAAYE,KACpB9B,MAIL+B,EAAa,CAACD,EAAIxB,KACtBC,QAAQC,mBAAmBsB,kBAAmBxB,QAG1C0B,EAAWF,IACfvB,QAAQ0B,qCAAqCH,+BAG/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH","file":"src.f9fca345.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n// TASK 1 //\n\nconst delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n};\n\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger1);\ndelay(1000).then(logger1); \ndelay(1500).then(logger1);\n\n// TASK 2 //\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user\n        );\n\n        resolve(updatedUsers);\n    });\n};\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger2);\ntoggleUserState(users, 'Lux').then(logger2);\n\n// TASK 3 //\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    \n    return new Promise((resolve, reject) => {\n        \n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve(transaction.id, delay);\n            }\n\n            reject(transaction.id);\n        }, delay); \n    })\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n"]}